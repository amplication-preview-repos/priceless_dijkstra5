/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EventRecord } from "./EventRecord";
import { EventRecordCountArgs } from "./EventRecordCountArgs";
import { EventRecordFindManyArgs } from "./EventRecordFindManyArgs";
import { EventRecordFindUniqueArgs } from "./EventRecordFindUniqueArgs";
import { DeleteEventRecordArgs } from "./DeleteEventRecordArgs";
import { EventRecordService } from "../eventRecord.service";
@graphql.Resolver(() => EventRecord)
export class EventRecordResolverBase {
  constructor(protected readonly service: EventRecordService) {}

  async _eventRecordsMeta(
    @graphql.Args() args: EventRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventRecord])
  async eventRecords(
    @graphql.Args() args: EventRecordFindManyArgs
  ): Promise<EventRecord[]> {
    return this.service.eventRecords(args);
  }

  @graphql.Query(() => EventRecord, { nullable: true })
  async eventRecord(
    @graphql.Args() args: EventRecordFindUniqueArgs
  ): Promise<EventRecord | null> {
    const result = await this.service.eventRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventRecord)
  async deleteEventRecord(
    @graphql.Args() args: DeleteEventRecordArgs
  ): Promise<EventRecord | null> {
    try {
      return await this.service.deleteEventRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
