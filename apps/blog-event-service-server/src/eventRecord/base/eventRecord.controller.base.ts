/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EventRecordService } from "../eventRecord.service";
import { EventRecordCreateInput } from "./EventRecordCreateInput";
import { EventRecord } from "./EventRecord";
import { EventRecordFindManyArgs } from "./EventRecordFindManyArgs";
import { EventRecordWhereUniqueInput } from "./EventRecordWhereUniqueInput";
import { EventRecordUpdateInput } from "./EventRecordUpdateInput";

export class EventRecordControllerBase {
  constructor(protected readonly service: EventRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventRecord })
  async createEventRecord(
    @common.Body() data: EventRecordCreateInput
  ): Promise<EventRecord> {
    return await this.service.createEventRecord({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EventRecord] })
  @ApiNestedQuery(EventRecordFindManyArgs)
  async eventRecords(@common.Req() request: Request): Promise<EventRecord[]> {
    const args = plainToClass(EventRecordFindManyArgs, request.query);
    return this.service.eventRecords({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async eventRecord(
    @common.Param() params: EventRecordWhereUniqueInput
  ): Promise<EventRecord | null> {
    const result = await this.service.eventRecord({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEventRecord(
    @common.Param() params: EventRecordWhereUniqueInput,
    @common.Body() data: EventRecordUpdateInput
  ): Promise<EventRecord | null> {
    try {
      return await this.service.updateEventRecord({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEventRecord(
    @common.Param() params: EventRecordWhereUniqueInput
  ): Promise<EventRecord | null> {
    try {
      return await this.service.deleteEventRecord({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
