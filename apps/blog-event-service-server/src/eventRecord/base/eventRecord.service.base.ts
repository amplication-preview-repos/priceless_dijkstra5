/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EventRecord as PrismaEventRecord } from "@prisma/client";

export class EventRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventRecord.count(args);
  }

  async eventRecords(
    args: Prisma.EventRecordFindManyArgs
  ): Promise<PrismaEventRecord[]> {
    return this.prisma.eventRecord.findMany(args);
  }
  async eventRecord(
    args: Prisma.EventRecordFindUniqueArgs
  ): Promise<PrismaEventRecord | null> {
    return this.prisma.eventRecord.findUnique(args);
  }
  async createEventRecord(
    args: Prisma.EventRecordCreateArgs
  ): Promise<PrismaEventRecord> {
    return this.prisma.eventRecord.create(args);
  }
  async updateEventRecord(
    args: Prisma.EventRecordUpdateArgs
  ): Promise<PrismaEventRecord> {
    return this.prisma.eventRecord.update(args);
  }
  async deleteEventRecord(
    args: Prisma.EventRecordDeleteArgs
  ): Promise<PrismaEventRecord> {
    return this.prisma.eventRecord.delete(args);
  }
}
